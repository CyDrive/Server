// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileStreamClient is the client API for FileStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileStreamClient interface {
	SendFile(ctx context.Context, opts ...grpc.CallOption) (FileStream_SendFileClient, error)
	RecvFile(ctx context.Context, in *RecvFileRequest, opts ...grpc.CallOption) (FileStream_RecvFileClient, error)
}

type fileStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewFileStreamClient(cc grpc.ClientConnInterface) FileStreamClient {
	return &fileStreamClient{cc}
}

func (c *fileStreamClient) SendFile(ctx context.Context, opts ...grpc.CallOption) (FileStream_SendFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileStream_ServiceDesc.Streams[0], "/rpc.FileStream/SendFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileStreamSendFileClient{stream}
	return x, nil
}

type FileStream_SendFileClient interface {
	Send(*SendFileChunkRequest) error
	CloseAndRecv() (*SendFileResponse, error)
	grpc.ClientStream
}

type fileStreamSendFileClient struct {
	grpc.ClientStream
}

func (x *fileStreamSendFileClient) Send(m *SendFileChunkRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileStreamSendFileClient) CloseAndRecv() (*SendFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileStreamClient) RecvFile(ctx context.Context, in *RecvFileRequest, opts ...grpc.CallOption) (FileStream_RecvFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileStream_ServiceDesc.Streams[1], "/rpc.FileStream/RecvFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileStreamRecvFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileStream_RecvFileClient interface {
	Recv() (*RecvFileChunkResponse, error)
	grpc.ClientStream
}

type fileStreamRecvFileClient struct {
	grpc.ClientStream
}

func (x *fileStreamRecvFileClient) Recv() (*RecvFileChunkResponse, error) {
	m := new(RecvFileChunkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileStreamServer is the server API for FileStream service.
// All implementations must embed UnimplementedFileStreamServer
// for forward compatibility
type FileStreamServer interface {
	SendFile(FileStream_SendFileServer) error
	RecvFile(*RecvFileRequest, FileStream_RecvFileServer) error
	mustEmbedUnimplementedFileStreamServer()
}

// UnimplementedFileStreamServer must be embedded to have forward compatible implementations.
type UnimplementedFileStreamServer struct {
}

func (UnimplementedFileStreamServer) SendFile(FileStream_SendFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (UnimplementedFileStreamServer) RecvFile(*RecvFileRequest, FileStream_RecvFileServer) error {
	return status.Errorf(codes.Unimplemented, "method RecvFile not implemented")
}
func (UnimplementedFileStreamServer) mustEmbedUnimplementedFileStreamServer() {}

// UnsafeFileStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileStreamServer will
// result in compilation errors.
type UnsafeFileStreamServer interface {
	mustEmbedUnimplementedFileStreamServer()
}

func RegisterFileStreamServer(s grpc.ServiceRegistrar, srv FileStreamServer) {
	s.RegisterService(&FileStream_ServiceDesc, srv)
}

func _FileStream_SendFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileStreamServer).SendFile(&fileStreamSendFileServer{stream})
}

type FileStream_SendFileServer interface {
	SendAndClose(*SendFileResponse) error
	Recv() (*SendFileChunkRequest, error)
	grpc.ServerStream
}

type fileStreamSendFileServer struct {
	grpc.ServerStream
}

func (x *fileStreamSendFileServer) SendAndClose(m *SendFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileStreamSendFileServer) Recv() (*SendFileChunkRequest, error) {
	m := new(SendFileChunkRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileStream_RecvFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RecvFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileStreamServer).RecvFile(m, &fileStreamRecvFileServer{stream})
}

type FileStream_RecvFileServer interface {
	Send(*RecvFileChunkResponse) error
	grpc.ServerStream
}

type fileStreamRecvFileServer struct {
	grpc.ServerStream
}

func (x *fileStreamRecvFileServer) Send(m *RecvFileChunkResponse) error {
	return x.ServerStream.SendMsg(m)
}

// FileStream_ServiceDesc is the grpc.ServiceDesc for FileStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.FileStream",
	HandlerType: (*FileStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendFile",
			Handler:       _FileStream_SendFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RecvFile",
			Handler:       _FileStream_RecvFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc/file_stream.proto",
}
