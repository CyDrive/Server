// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileClient is the client API for File service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileClient interface {
	FileChunk(ctx context.Context, opts ...grpc.CallOption) (File_FileChunkClient, error)
	FileInfo(ctx context.Context, opts ...grpc.CallOption) (File_FileInfoClient, error)
}

type fileClient struct {
	cc grpc.ClientConnInterface
}

func NewFileClient(cc grpc.ClientConnInterface) FileClient {
	return &fileClient{cc}
}

func (c *fileClient) FileChunk(ctx context.Context, opts ...grpc.CallOption) (File_FileChunkClient, error) {
	stream, err := c.cc.NewStream(ctx, &File_ServiceDesc.Streams[0], "/rpc.File/FileChunk", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileFileChunkClient{stream}
	return x, nil
}

type File_FileChunkClient interface {
	Send(*NodeFileChunk) error
	Recv() (*MasterFileChunk, error)
	grpc.ClientStream
}

type fileFileChunkClient struct {
	grpc.ClientStream
}

func (x *fileFileChunkClient) Send(m *NodeFileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileFileChunkClient) Recv() (*MasterFileChunk, error) {
	m := new(MasterFileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileClient) FileInfo(ctx context.Context, opts ...grpc.CallOption) (File_FileInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &File_ServiceDesc.Streams[1], "/rpc.File/FileInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileFileInfoClient{stream}
	return x, nil
}

type File_FileInfoClient interface {
	Send(*NodeFileInfo) error
	Recv() (*MasterFileInfo, error)
	grpc.ClientStream
}

type fileFileInfoClient struct {
	grpc.ClientStream
}

func (x *fileFileInfoClient) Send(m *NodeFileInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileFileInfoClient) Recv() (*MasterFileInfo, error) {
	m := new(MasterFileInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServer is the server API for File service.
// All implementations must embed UnimplementedFileServer
// for forward compatibility
type FileServer interface {
	FileChunk(File_FileChunkServer) error
	FileInfo(File_FileInfoServer) error
	mustEmbedUnimplementedFileServer()
}

// UnimplementedFileServer must be embedded to have forward compatible implementations.
type UnimplementedFileServer struct {
}

func (UnimplementedFileServer) FileChunk(File_FileChunkServer) error {
	return status.Errorf(codes.Unimplemented, "method FileChunk not implemented")
}
func (UnimplementedFileServer) FileInfo(File_FileInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method FileInfo not implemented")
}
func (UnimplementedFileServer) mustEmbedUnimplementedFileServer() {}

// UnsafeFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServer will
// result in compilation errors.
type UnsafeFileServer interface {
	mustEmbedUnimplementedFileServer()
}

func RegisterFileServer(s grpc.ServiceRegistrar, srv FileServer) {
	s.RegisterService(&File_ServiceDesc, srv)
}

func _File_FileChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServer).FileChunk(&fileFileChunkServer{stream})
}

type File_FileChunkServer interface {
	Send(*MasterFileChunk) error
	Recv() (*NodeFileChunk, error)
	grpc.ServerStream
}

type fileFileChunkServer struct {
	grpc.ServerStream
}

func (x *fileFileChunkServer) Send(m *MasterFileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileFileChunkServer) Recv() (*NodeFileChunk, error) {
	m := new(NodeFileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _File_FileInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServer).FileInfo(&fileFileInfoServer{stream})
}

type File_FileInfoServer interface {
	Send(*MasterFileInfo) error
	Recv() (*NodeFileInfo, error)
	grpc.ServerStream
}

type fileFileInfoServer struct {
	grpc.ServerStream
}

func (x *fileFileInfoServer) Send(m *MasterFileInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileFileInfoServer) Recv() (*NodeFileInfo, error) {
	m := new(NodeFileInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// File_ServiceDesc is the grpc.ServiceDesc for File service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var File_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.File",
	HandlerType: (*FileServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FileChunk",
			Handler:       _File_FileChunk_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "FileInfo",
			Handler:       _File_FileInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc/file_stream.proto",
}
