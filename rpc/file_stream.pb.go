// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: rpc/file_stream.proto

package rpc

import (
	models "github.com/CyDrive/models"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileChunkType int32

const (
	FileChunkType_Data FileChunkType = 0
	FileChunkType_End  FileChunkType = 1
)

// Enum value maps for FileChunkType.
var (
	FileChunkType_name = map[int32]string{
		0: "Data",
		1: "End",
	}
	FileChunkType_value = map[string]int32{
		"Data": 0,
		"End":  1,
	}
)

func (x FileChunkType) Enum() *FileChunkType {
	p := new(FileChunkType)
	*p = x
	return p
}

func (x FileChunkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileChunkType) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_file_stream_proto_enumTypes[0].Descriptor()
}

func (FileChunkType) Type() protoreflect.EnumType {
	return &file_rpc_file_stream_proto_enumTypes[0]
}

func (x FileChunkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileChunkType.Descriptor instead.
func (FileChunkType) EnumDescriptor() ([]byte, []int) {
	return file_rpc_file_stream_proto_rawDescGZIP(), []int{0}
}

// three types of this:
// 1. it's a connecting request, just all a empty request
// 2. it's a reponse for a read request
// 3. it's a reponse for write request, may report conflicts
type NodeFileChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId int64         `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`      // r&w,
	Offset int64         `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`                    // w
	Error  string        `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`                       // r&w
	Type   FileChunkType `protobuf:"varint,4,opt,name=type,proto3,enum=rpc.FileChunkType" json:"type,omitempty"` // r
	Data   []byte        `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`                         // r
}

func (x *NodeFileChunk) Reset() {
	*x = NodeFileChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_file_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeFileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeFileChunk) ProtoMessage() {}

func (x *NodeFileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_file_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeFileChunk.ProtoReflect.Descriptor instead.
func (*NodeFileChunk) Descriptor() ([]byte, []int) {
	return file_rpc_file_stream_proto_rawDescGZIP(), []int{0}
}

func (x *NodeFileChunk) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *NodeFileChunk) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *NodeFileChunk) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *NodeFileChunk) GetType() FileChunkType {
	if x != nil {
		return x.Type
	}
	return FileChunkType_Data
}

func (x *NodeFileChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// three types of this:
// 1. it's a connecting response, just all a empty response
// 2. it's a read request
// 3. it's a write request
type MasterFileChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId         int64         `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                         // r&w, first for read, continue for w
	FilePath       string        `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`                    // r&w, first
	ShouldTruncate bool          `protobuf:"varint,3,opt,name=should_truncate,json=shouldTruncate,proto3" json:"should_truncate,omitempty"` // w, first
	ShouldAppend   bool          `protobuf:"varint,4,opt,name=should_append,json=shouldAppend,proto3" json:"should_append,omitempty"`       // w, first
	Type           FileChunkType `protobuf:"varint,5,opt,name=type,proto3,enum=rpc.FileChunkType" json:"type,omitempty"`                    // w, continue
	Data           []byte        `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`                                            // w, continue
}

func (x *MasterFileChunk) Reset() {
	*x = MasterFileChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_file_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterFileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterFileChunk) ProtoMessage() {}

func (x *MasterFileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_file_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterFileChunk.ProtoReflect.Descriptor instead.
func (*MasterFileChunk) Descriptor() ([]byte, []int) {
	return file_rpc_file_stream_proto_rawDescGZIP(), []int{1}
}

func (x *MasterFileChunk) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *MasterFileChunk) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *MasterFileChunk) GetShouldTruncate() bool {
	if x != nil {
		return x.ShouldTruncate
	}
	return false
}

func (x *MasterFileChunk) GetShouldAppend() bool {
	if x != nil {
		return x.ShouldAppend
	}
	return false
}

func (x *MasterFileChunk) GetType() FileChunkType {
	if x != nil {
		return x.Type
	}
	return FileChunkType_Data
}

func (x *MasterFileChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type NodeFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileInfo *models.FileInfo `protobuf:"bytes,1,opt,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
}

func (x *NodeFileInfo) Reset() {
	*x = NodeFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_file_stream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeFileInfo) ProtoMessage() {}

func (x *NodeFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_file_stream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeFileInfo.ProtoReflect.Descriptor instead.
func (*NodeFileInfo) Descriptor() ([]byte, []int) {
	return file_rpc_file_stream_proto_rawDescGZIP(), []int{2}
}

func (x *NodeFileInfo) GetFileInfo() *models.FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

type MasterFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
}

func (x *MasterFileInfo) Reset() {
	*x = MasterFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_file_stream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterFileInfo) ProtoMessage() {}

func (x *MasterFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_file_stream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterFileInfo.ProtoReflect.Descriptor instead.
func (*MasterFileInfo) Descriptor() ([]byte, []int) {
	return file_rpc_file_stream_proto_rawDescGZIP(), []int{3}
}

func (x *MasterFileInfo) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

var File_rpc_file_stream_proto protoreflect.FileDescriptor

var file_rpc_file_stream_proto_rawDesc = []byte{
	0x0a, 0x15, 0x72, 0x70, 0x63, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x70, 0x63, 0x1a, 0x16, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x01, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x26, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd1, 0x01, 0x0a, 0x0f, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x74, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a,
	0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2d, 0x0a, 0x0e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x2a, 0x22, 0x0a, 0x0d, 0x46,
	0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x10, 0x01, 0x32,
	0x7d, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x12, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x14, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x38, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x18,
	0x5a, 0x16, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x79, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_file_stream_proto_rawDescOnce sync.Once
	file_rpc_file_stream_proto_rawDescData = file_rpc_file_stream_proto_rawDesc
)

func file_rpc_file_stream_proto_rawDescGZIP() []byte {
	file_rpc_file_stream_proto_rawDescOnce.Do(func() {
		file_rpc_file_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_file_stream_proto_rawDescData)
	})
	return file_rpc_file_stream_proto_rawDescData
}

var file_rpc_file_stream_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_rpc_file_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_rpc_file_stream_proto_goTypes = []interface{}{
	(FileChunkType)(0),      // 0: rpc.FileChunkType
	(*NodeFileChunk)(nil),   // 1: rpc.NodeFileChunk
	(*MasterFileChunk)(nil), // 2: rpc.MasterFileChunk
	(*NodeFileInfo)(nil),    // 3: rpc.NodeFileInfo
	(*MasterFileInfo)(nil),  // 4: rpc.MasterFileInfo
	(*models.FileInfo)(nil), // 5: models.FileInfo
}
var file_rpc_file_stream_proto_depIdxs = []int32{
	0, // 0: rpc.NodeFileChunk.type:type_name -> rpc.FileChunkType
	0, // 1: rpc.MasterFileChunk.type:type_name -> rpc.FileChunkType
	5, // 2: rpc.NodeFileInfo.file_info:type_name -> models.FileInfo
	1, // 3: rpc.File.FileChunk:input_type -> rpc.NodeFileChunk
	3, // 4: rpc.File.FileInfo:input_type -> rpc.NodeFileInfo
	2, // 5: rpc.File.FileChunk:output_type -> rpc.MasterFileChunk
	4, // 6: rpc.File.FileInfo:output_type -> rpc.MasterFileInfo
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_rpc_file_stream_proto_init() }
func file_rpc_file_stream_proto_init() {
	if File_rpc_file_stream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_file_stream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeFileChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_file_stream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterFileChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_file_stream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_file_stream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_file_stream_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_file_stream_proto_goTypes,
		DependencyIndexes: file_rpc_file_stream_proto_depIdxs,
		EnumInfos:         file_rpc_file_stream_proto_enumTypes,
		MessageInfos:      file_rpc_file_stream_proto_msgTypes,
	}.Build()
	File_rpc_file_stream_proto = out.File
	file_rpc_file_stream_proto_rawDesc = nil
	file_rpc_file_stream_proto_goTypes = nil
	file_rpc_file_stream_proto_depIdxs = nil
}
